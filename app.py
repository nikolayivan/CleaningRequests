# -*- coding: utf-8 -*-
"""
Created on Sat Jul 31 19:28:16 2021

@author: w10
"""

import streamlit as st
import pandas as pd
import datetime
import time
import pytz
import smtplib
import os

from PIL import Image


# from win32com.client import Dispatch 

# import gspread
# from gspread_dataframe import set_with_dataframe
# from oauth2client import client
# from oauth2client.service_account import ServiceAccountCredentials

# from __future__ import print_function
from googleapiclient.discovery import build
# from google_auth_oauthlib.flow import InstalledAppFlow
# from google.auth.transport.requests import Request
# from google.oauth2.credentials import Credentials

from google.oauth2 import service_account
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from platform import python_version


# from fpdf import FPDF
# import base64

tz = pytz.timezone('Europe/Moscow')
       
MainPrice = 0
ExtraPrice = 0
ChemicPrice = 0
TotalPrice = 0
FinalPrice = 0
Discount = 0

BedRoomArea = 0
DiningRoomArea = 0
KitchenArea = 0
ToiletArea = 0
CaridorArea = 0
BesedkaArea = 0
SaunaArea = 0
TotalRoomsArea = 0

SofaSizeAmountList = []
ChairSizeAmountList = []
MatrasSizeAmountList = []
KoverSizeAmountList = []

AdditionCleanList = ['–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ','–í—ã—Ç—è–∂–∫–∞','–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫','–°–í-–ø–µ—á—å', '–õ—é—Å—Ç—Ä–∞']

AppartmentCoef = 1
HouseCoef = 1.1
ComercialCoef = 1.2

SupportCleaningPrice = 70
GenCleaningPrice = 90
AfterStroyPrice = 150

Steamprice = 25

StandardWindow = 250
VitragWindow = 700
OvenPrice = 500
VytigkaPrice = 500
FridgePrice = 500
SVOvenPrice = 300
LustraPrice = 300

WindowsType = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
WindowsAmount = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
WindowsCost = 0
WindowsTypeBalkon = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
WindowsAmountBalkon = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
WindowsBalkonCost = 0
OvenCost = 0
VytigkaCost = 0
FridgeCost = 0
SVOvenCost = 0
LustraCost = 0

PromoCode = '–ù–µ —É–∫–∞–∑–∞–Ω'
Photos = '–ü—É—Å—Ç–æ'

Name = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
PhoneNumber = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
Adress = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

FridgeAmount = 0
SVOvenAmount = 0
LustraAmount = 0

ChemicSmallSofaPrice = 2400
ChemicMiddleSofaPrice = 2800
ChemicBigSofaPrice = 3000

ChemicChairPrice = 1000
ChemicMatrasPrice = 2000
ChemicKoverPrice = 1800  
ChemicCurtainPrice = 1500
ChemicStulPrice = 300

Sofa = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
Chair = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
Matras = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
Kover = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
Curtains = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
Spoils = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
Stuls = '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'

SofaAmount = 0
ChairAmount = 0
MatrasAmount = 0
KoverAmount = 0
CurtainsAmount = 0
StulsAmount = 0

SofaSizeAmountList = [0,0,0,0,0,0,0,0,0,0]
ChairSizeAmountList = [0,0,0,0,0,0,0,0,0,0]
MatrasSizeAmountList = [0,0,0,0,0,0,0,0,0,0]
KoverSizeAmountList = [0,0,0,0,0,0,0,0,0,0]

UserInput3 = '–ù–µ—Ç'

BedRoomSizeList = [0,0,0,0,0]
DiningRoomSizeList = [0,0,0,0,0]
ToiletSizeList = [0,0,0,0,0]
KitchenSizeList = [0,0,0,0,0]
CaridorSizeList = [0,0,0,0,0]
SaunaSizeList = [0,0,0,0,0]
BesedkaSizeList = [0,0,0,0,0]

def RemoveSpace(string):
    return string.replace(" ", "")

def BedRoomFunc(i,col3):
    with col3:
        BedRoomSize = st.slider(f'–†–∞–∑–º–µ—Ä {i+1}-–π —Å–ø–∞–ª—å–Ω–∏ –≤ –∫–≤.–º.', min_value=0, max_value=50)
        BedRoomSizeList[i] = BedRoomSize
        
def DiningRoomFunc(i,col3):
    with col3:
        DiningRoomSize = st.slider(f'–†–∞–∑–º–µ—Ä {i+1}-–π –≥–æ—Å—Ç–∏–Ω–æ–π –≤ –∫–≤.–º.', min_value=0, max_value=50)
        DiningRoomSizeList[i] = DiningRoomSize
        
def ToiletFunc(i,col3):
    with col3:
        ToiletSize = st.slider(f'–†–∞–∑–º–µ—Ä {i+1}-–≥–æ —Ç—É–∞–ª–µ—Ç–∞ –≤ –∫–≤.–º.', min_value=0, max_value=50)
        ToiletSizeList[i] = ToiletSize
        
def KitchenFunc(i,col3):
    with col3:
        KitchenSize = st.slider('–†–∞–∑–º–µ—Ä –∫—É—Ö–Ω–∏ –≤ –∫–≤.–º.', min_value=0, max_value=50)
        KitchenSizeList[i] = KitchenSize
        
def CaridorFunc(i,col3):
    with col3:
        CaridorSize = st.slider(f'–†–∞–∑–º–µ—Ä {i+1}-–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞ –≤ –∫–≤.–º.', min_value=0, max_value=50)
        CaridorSizeList[i] = CaridorSize
        
def SaunaFunc(i,col3):
    with col3:
        SaunaSize = st.slider('–†–∞–∑–º–µ—Ä —Å–∞—É–Ω—ã –≤ –∫–≤.–º.', min_value=0, max_value=50)
        SaunaSizeList[i] = SaunaSize

def BesedkaFunc(i,col3):
    with col3:
        BesedkaSize = st.slider('–†–∞–∑–º–µ—Ä –±–µ—Å–µ–¥–∫–∏ –≤ –∫–≤.–º.', min_value=0, max_value=50)
        BesedkaSizeList[i] = BesedkaSize
         
def SofaFunc(i,col3):
    with col3:
        SofaSizeAmount = st.selectbox(f'–†–∞–∑–º–µ—Ä {i+1}-–≥–æ –¥–∏–≤–∞–Ω–∞', ['–î–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π','–¢—Ä–µ—Ö–º–µ—Å—Ç–Ω—ã–π','–£–≥–ª–æ–≤–æ–π'])
        SofaSizeAmountList.append(SofaSizeAmount)
        
def ChairFunc(i,col3):
    with col3:
        ChairSizeAmount = st.selectbox(f'–†–∞–∑–º–µ—Ä {i+1}-–≥–æ –∫—Ä–µ—Å–ª–∞', ['–ú–∞–ª–µ–Ω—å–∫–∏–π','–°—Ä–µ–¥–Ω–∏–π','–ë–æ–ª—å—à–æ–π'])
        ChairSizeAmountList.append(ChairSizeAmount)
        
def MatrasFunc(i,col3):
    with col3:
        MatrasSizeAmount = st.selectbox(f'–†–∞–∑–º–µ—Ä {i+1}-–≥–æ –º–∞—Ç—Ä–∞—Å–∞', ['–û–¥–Ω–æ—Å–ø–∞–ª—å–Ω—ã–π','–ü–æ–ª—É—Ç–æ—Ä–æ—Å–ø–∞–ª—å–Ω—ã–π','–î–≤—É—Ö—Å–ø–∞–ª—å–Ω—ã–π'])
        MatrasSizeAmountList.append(MatrasSizeAmount)
        
def KoverFunc(i,col3):
    with col3:
        KoverSizeAmount = st.selectbox(f'–†–∞–∑–º–µ—Ä {i+1}-–≥–æ –∫–æ–≤—Ä–∞', ['–ú–∞–ª–µ–Ω—å–∫–∏–π','–°—Ä–µ–¥–Ω–∏–π','–ë–æ–ª—å—à–æ–π'])
        KoverSizeAmountList.append(KoverSizeAmount)


def SendEmail(Name,NumberID,Email):
    
    server = 'smtp.gmail.com'
    user = 'yuldyzcleaning@gmail.com'
    password = '1nRiAM5k'

    recipients = Email
    sender = 'yuldyzcleaning@gmail.com'
    subject = '–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–ª–∏–Ω–∏–Ω–≥ ‚Ññ{}'.format(NumberID)
    # text = '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è sdf sdf sdf sdaf <b>sdaf sdf</b> fg hsdgh <h1>f sd</h1> dfhjhgs sd gsdfg sdf'
    text = '{}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! <br><br> –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è <b>–Æ–ª–¥—ã–∑ –ö–ª–∏–Ω–∏–Ω–≥!</b> <br><br> –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –í–∞—Å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—ã—Ö —É—Å–ª—É–≥. <br><br> –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–µ—Ç–∞–ª–µ–π. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏. <br><br> –ñ–µ–ª–∞–µ–º –í–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! <br><br> –ò—Å–∫—Ä–µ–Ω–Ω–µ –í–∞—à,<br> –Æ–ª–¥—ã–∑ –ö–ª–∏–Ω–∏–Ω–≥ :)'.format(Name)
    html = '<html><head></head><body><p>' + text + '</p></body></html>'

    filepath = 'logoYldiz.png'
    basename = os.path.basename(filepath)
    filesize = os.path.getsize(filepath)

    msg = MIMEMultipart('alternative')
    msg['Subject'] = subject
    msg['From'] = '–Æ–ª–¥—ã–∑ –ö–ª–∏–Ω–∏–Ω–≥'
    msg['To'] = recipients
#     msg['To'] = ', '.join(recipients)
    msg['Reply-To'] = sender
    msg['Return-Path'] = sender
    msg['X-Mailer'] = 'Python/' + (python_version())

    part_text = MIMEText(text, 'plain')
    part_html = MIMEText(html, 'html')
    part_file = MIMEBase('application', 'octet-stream; name="{}"'.format(basename))
    part_file.set_payload(open(filepath, "rb").read())
    part_file.add_header('Content-Description', basename)
    part_file.add_header('Content-Disposition', 'attachment; filename="{}"; size={}'.format(basename, filesize))
    encoders.encode_base64(part_file)

    msg.attach(part_text)
    msg.attach(part_html)
    msg.attach(part_file)

    mail = smtplib.SMTP_SSL(server)
    mail.login(user, password)
    mail.sendmail(sender, recipients, msg.as_string())
    mail.quit()
    
         
col1, col2, col3 = st.beta_columns(3)
with col2:
    image = Image.open('logoYldiz.png')
    st.image(image, width=250)

st.title('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—ã—Ö —É—Å–ª—É–≥ üí´')

st.write('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è *–Æ–ª–¥—ã–∑-–ö–ª–∏–Ω–∏–Ω–≥!* üëã')
st.write('–ù–∞—à –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–≤–æ–ª–∏—Ç –±—ã—Å—Ç—Ä–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –í–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–±—ä–µ–º —Ä–∞–±–æ—Ç. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞—à–∏–º –≥–ª–∞–≤–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ–±—ä—ë–º–∞ —Ä–∞–±–æ—Ç –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π.')

st.header('–®–∞–≥ 1. –û—Å–Ω–æ–≤–Ω–∞—è —É–±–æ—Ä–∫–∞')

col1, col2 = st.beta_columns(2)
with col1:
    ObjectType = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è",['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–î–æ–º', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ'])
with col2:
    Area = st.number_input('–ö–∞–∫–∞—è —É –í–∞—Å –ø–ª–æ—â–∞–¥—å?', min_value=0, max_value=1000, value=0, step=1)


col1, col2 = st.beta_columns(2)
with col1:
    CleanType = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏.",('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è', '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è', '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è'))
with col2:
    if CleanType == '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è':
        st.text('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç: \n - –æ—Ç 1-2 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π; \n - —É–¥–∞–ª–µ–Ω–∏–µ –ª–µ–≥–∫–∏—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π; \n - —Ä–∞–±–æ—Ç–∞ –æ—Ç 2-4 —á–∞—Å–æ–≤')
    elif CleanType == '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è':
        st.text('–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç: \n - –æ—Ç 2-4 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π; \n - —É–¥–∞–ª–µ–Ω–∏–µ –ª—é–±—ã—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π; \n - —Ä–∞–±–æ—Ç–∞ –æ—Ç 5-8 —á–∞—Å–æ–≤')
    elif CleanType == '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è':
        st.text('–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç: \n - –æ—Ç 3-6 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π; \n - —É–¥–∞–ª–µ–Ω–∏–µ –ª—é–±—ã—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π –∏ —Å–ª–µ–¥–æ–≤ —Å—Ç—Ä–æ–π–∫–∏; \n - —Ä–∞–±–æ—Ç–∞ –æ—Ç 6-10 —á–∞—Å–æ–≤')


# TotalRoomsArea = BedRoomArea + DiningRoomArea + ToiletArea + KitchenArea + CaridorArea + SaunaArea + BesedkaArea

if (ObjectType == '–ö–≤–∞—Ä—Ç–∏—Ä–∞') or (ObjectType == '–î–æ–º'):
    
    CleanVolumn = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º —É–±–æ—Ä–∫–∏.",('–í—Å–µ –∫–æ–º–Ω–∞—Ç—ã', '–ü–æ –∫–æ–º–Ω–∞—Ç–∞–º'))
    
    if CleanVolumn == '–ü–æ –∫–æ–º–Ω–∞—Ç–∞–º':
        st.write('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—á–∏—Å—Ç–∏—Ç—å')
        
        col1, col2, col3 = st.beta_columns(3)
        with col1:
            BedRoom = st.checkbox('–°–ø–∞–ª—å–Ω—è')
            if BedRoom:
                with col2:
                    BedRoomAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω', min_value=1, max_value=5, value=1, step=1)
                    if BedRoomAmount:
                        for i in range(BedRoomAmount):
                            BedRoomFunc(i,col3)
                        BedRoomArea = sum(BedRoomSizeList)
                        TotalRoomsArea += BedRoomArea
                        if BedRoomAmount > 1:
                            st.write('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å–ø–∞–ª–µ–Ω –≤ –∫–≤.–º.: ', BedRoomArea)
        
        col1, col2, col3 = st.beta_columns(3)
        with col1:
            DiningRoom = st.checkbox('–ì–æ—Å—Ç–∏–Ω–∞—è')
            if DiningRoom:
                with col2:
                    DiningRoomAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–∏–Ω—ã—Ö', min_value=1, max_value=5, value=1, step=1)
                    if DiningRoomAmount:
                        for i in range(DiningRoomAmount):
                            DiningRoomFunc(i,col3)
                        DiningRoomArea = sum(DiningRoomSizeList)
                        TotalRoomsArea += DiningRoomArea
                        if DiningRoomAmount > 1:
                            st.write('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –≥–æ—Å—Ç–∏–Ω–æ–π –∫–≤.–º.: ', DiningRoomArea)
        
        col1, col2, col3 = st.beta_columns(3)
        with col1:  
            Toilet = st.checkbox('–°–∞–Ω—É–∑–µ–ª')
            if Toilet:
                with col2:
                    ToiletAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤', min_value=1, max_value=5, value=1, step=1)
                    if ToiletAmount:
                        for i in range(ToiletAmount):
                            ToiletFunc(i,col3)
                        ToiletArea = sum(ToiletSizeList)
                        TotalRoomsArea += ToiletArea
                        if ToiletAmount > 1:
                            st.write('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å–∞–Ω—É–∑–ª–æ–≤ –≤ –∫–≤.–º.: ', ToiletArea)
                    
                
        col1, col2, col3 = st.beta_columns(3)
        with col1:
            Kitchen = st.checkbox('–ö—É—Ö–Ω—è')
            if Kitchen:
                with col2:
                    KitchenAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ö–æ–Ω—å', min_value=1, max_value=2, value=1, step=1)
                    if KitchenAmount:
                        for i in range(KitchenAmount):
                            KitchenFunc(i,col3)
                        KitchenArea = sum(KitchenSizeList)
                        TotalRoomsArea += KitchenArea
                        if KitchenAmount > 1:
                            st.write('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –≤ –∫–≤.–º.: ', KitchenArea)
                    
        
        col1, col2, col3 = st.beta_columns(3)
        with col1:
            Caridor = st.checkbox('–ö–æ—Ä–∏–¥–æ—Ä')
            if Caridor:
                with col2:
                    CaridorAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤', min_value=1, max_value=5, value=1, step=1)
                    if CaridorAmount:
                        for i in range(CaridorAmount):
                            CaridorFunc(i,col3)
                        CaridorArea = sum(CaridorSizeList)
                        TotalRoomsArea += CaridorArea
                        if CaridorAmount > 1:
                            st.write('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ—Ä–∏–¥–æ—Ä–æ–≤ –≤ –∫–≤.–º.: ', CaridorArea)
                    
        
        if ObjectType == '–î–æ–º':
            col1, col2, col3 = st.beta_columns(3)
            with col1:
                Sauna = st.checkbox('–°–∞—É–Ω–∞/–ë–∞–Ω—è')
                if Sauna:
                    with col2:
                        # SaunaSize = st.slider('–†–∞–∑–º–µ—Ä –°–∞—É–Ω—ã/–ë–∞–Ω–∏ –≤ –∫–≤.–º.', min_value=0, max_value=50)
                        # CaridorAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤', min_value=1, max_value=5, value=1, step=1)
                        SaunaAmount=1
                    if SaunaAmount:
                        for i in range(SaunaAmount):
                            SaunaFunc(i,col3)
                        SaunaArea = sum(SaunaSizeList)
                        TotalRoomsArea += SaunaArea
                        st.write('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å–∞—É–Ω—ã –≤ –∫–≤.–º.: ', SaunaArea)
                            
                        
            col1, col2, col3 = st.beta_columns(3)
            with col1:
                Besedka = st.checkbox('–ë–µ—Å–µ–¥–∫–∞')
                if Besedka:
                    with col2:
                        BesedkaAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–µ–¥–æ–∫', min_value=1, max_value=5, value=1, step=1)
                    if BesedkaAmount:
                        for i in range(BesedkaAmount):
                            BesedkaFunc(i,col3)
                        BesedkaArea = sum(BesedkaSizeList)
                        TotalRoomsArea += BesedkaArea
                        if BesedkaAmount > 1:
                            st.write('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —Å–∞—É–Ω—ã –≤ –∫–≤.–º.: ', BesedkaArea)
                            
else:
    CleanVolumn = '–í—Å–µ –∫–æ–º–Ω–∞—Ç—ã'                  

if ObjectType == '–ö–≤–∞—Ä—Ç–∏—Ä–∞':
    ObjectTypeCoeff = AppartmentCoef
elif ObjectType == '–î–æ–º':
    ObjectTypeCoeff = HouseCoef
elif ObjectType == '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ':
    ObjectTypeCoeff = ComercialCoef


if CleanVolumn == '–í—Å–µ –∫–æ–º–Ω–∞—Ç—ã':

    if CleanType == '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è':
        MainPrice = SupportCleaningPrice*Area*ObjectTypeCoeff
    elif CleanType == '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è':
        MainPrice = GenCleaningPrice*Area*ObjectTypeCoeff
    elif CleanType == '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è':
        MainPrice = AfterStroyPrice*Area*ObjectTypeCoeff
        
else:
    if CleanType == '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è':
        MainPrice = SupportCleaningPrice*TotalRoomsArea*ObjectTypeCoeff
    elif CleanType == '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è':
        MainPrice = GenCleaningPrice*TotalRoomsArea*ObjectTypeCoeff
    elif CleanType == '–ü–æ—Å–ª–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è':
        MainPrice = AfterStroyPrice*TotalRoomsArea*ObjectTypeCoeff
    

# st.write('–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —É—Å–ª—É–≥:', int(MainPrice), '—Ä—É–±.')

if st.checkbox('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üìù'):
    UserInput1 = st.text_area("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π —É–±–æ—Ä–∫–µ")
else:
    UserInput1 = '–ù–µ—Ç'
    
    

st.header('–®–∞–≥ 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏')

if CleanType == '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è':
    SteamType = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏.",('–ë–µ–∑ –ø–∞—Ä–∞', '–° –ø–∞—Ä–æ–º'))
    if SteamType == '–° –ø–∞—Ä–æ–º':
        ExtraPrice += 25*Area*ObjectTypeCoeff
else:
    SteamType = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏.",['–° –ø–∞—Ä–æ–º'])
    st.text('* —É—Å–ª—É–≥–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π –∏–ª–∏ –ü–æ—Å–ª–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —É–±–æ—Ä–∫–∏.')


col1, col2, col3 = st.beta_columns(3)
with col1:
    Windows = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏.",('–ë–µ–∑ –º—ã—Ç—å—è –æ–∫–æ–Ω', '–ü–æ–º—ã—Ç—å –æ–∫–Ω–∞'))
    if Windows == '–ü–æ–º—ã—Ç—å –æ–∫–Ω–∞':
        with col2:
            WindowsType = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–∫–æ–Ω.",('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ', '–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ'))
            if WindowsType == '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ':
                WindowsTypePrice = StandardWindow
            else:
                WindowsTypePrice = VitragWindow
        with col3:
            WindowsAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫', min_value=1, max_value=50, value=1, step=1)
            if WindowsAmount > 0:
                WindowsCost = WindowsAmount*WindowsTypePrice
                ExtraPrice += WindowsCost


col1, col2, col3 = st.beta_columns(3)
with col1:
    Balkon = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏.", ('–ë–µ–∑ –º—ã—Ç—å—è –±–∞–ª–∫–æ–Ω–∞', '–ü–æ–º—ã—Ç—å –±–∞–ª–∫–æ–Ω'))
    if Balkon == '–ü–æ–º—ã—Ç—å –±–∞–ª–∫–æ–Ω':
        with col2:
            WindowsTypeBalkon = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–ª–∫–æ–Ω–Ω—ã—Ö –æ–∫–æ–Ω.",('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ', '–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ'))
            if WindowsTypeBalkon == '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ':
                WindowsTypePrice = StandardWindow
            else:
                WindowsTypePrice = VitragWindow
        with col3:
            WindowsAmountBalkon = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–∫–æ–Ω–Ω—ã—Ö —Å—Ç–≤–æ—Ä–æ–∫', min_value=1, max_value=50, value=1, step=1)
            if WindowsAmountBalkon > 0:
                WindowsBalkonCost = WindowsAmountBalkon*WindowsTypePrice
                ExtraPrice += WindowsBalkonCost


container = st.beta_container()
all = st.checkbox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
if all:
    AdditionCleanChoice = container.multiselect('–ü–µ—Ä–µ—á–µ–Ω—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:', AdditionCleanList,AdditionCleanList)
else:
    AdditionCleanChoice =  container.multiselect('–ü–µ—Ä–µ—á–µ–Ω—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:',AdditionCleanList)

# AdditionCleanList = st.multiselect('–ü–µ—Ä–µ—á–µ–Ω—å –¥–æ–ø. —É—Å–ª—É–≥', ['–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ','–í—ã—Ç—è–∂–∫–∞','–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫','–°–í-–ø–µ—á—å', '–õ—é—Å—Ç—Ä–∞'])

# st.write(AdditionCleanChoice)

if '–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ' in AdditionCleanChoice:
    OvenCost = OvenPrice
    ExtraPrice += OvenCost

if '–í—ã—Ç—è–∂–∫–∞' in AdditionCleanChoice:
    VytigkaCost = VytigkaPrice
    ExtraPrice += VytigkaCost

col1, col2, col3 = st.beta_columns(3)
if '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫' in AdditionCleanChoice:
    with col1:
        FridgeAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤', min_value=1, max_value=5, value=1, step=1)
        if FridgeAmount > 0:
            FridgeCost = FridgeAmount*FridgePrice
            ExtraPrice += FridgeCost

if '–°–í-–ø–µ—á—å' in AdditionCleanChoice:
    with col1:
        SVOvenAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –°–í-–ø–µ—á–µ–π', min_value=1, max_value=5, value=1, step=1)
        if SVOvenAmount > 0:
            SVOvenCost = SVOvenAmount*SVOvenPrice
            ExtraPrice += SVOvenCost

if '–õ—é—Å—Ç—Ä–∞' in AdditionCleanChoice:
    with col1:
        LustraAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –ª—é—Å—Ç—Ä', min_value=1, max_value=5, value=1, step=1)
        if LustraAmount > 0:
            LustraCost = LustraAmount*LustraPrice
            ExtraPrice += LustraCost

if st.checkbox('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ—Ç–∞—Ä–∏–π üìù', key='AdditionServices comment'):
    UserInput2 = st.text_area("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É–±–æ—Ä–∫–µ")
else:
    UserInput2 = '–ù–µ—Ç'

# st.write('–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:', int(ExtraPrice), '—Ä—É–±.')


st.header('–®–∞–≥ 3. –•–∏–º—á–∏—Å—Ç–∫–∞ –º–µ–±–µ–ª–∏')

ChemicType = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏.",('–ë–µ–∑ —Ö–∏–º—á–∏—Å—Ç–∫–∏', '–° —Ö–∏–º—á–∏—Å—Ç–∫–æ–π'))
if ChemicType == '–° —Ö–∏–º—á–∏—Å—Ç–∫–æ–π':
    st.write('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—á–∏—Å—Ç–∏—Ç—å')
    
    col1, col2, col3 = st.beta_columns(3)
    with col1:
        Sofa = st.checkbox('–î–∏–≤–∞–Ω')
    if Sofa:
        with col2:
            SofaAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–∏–≤–∞–Ω–æ–≤', min_value=1, max_value=10, value=1, step=1)
            if SofaAmount:
                for i in range(SofaAmount):
                    SofaFunc(i,col3)
            if SofaAmount > 0:
                SmallSofaAmount = SofaSizeAmountList.count('–î–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π')
                MiddleSofaAmount = SofaSizeAmountList.count('–¢—Ä–µ—Ö–º–µ—Å—Ç–Ω—ã–π')
                BigSofaAmount = SofaSizeAmountList.count('–£–≥–ª–æ–≤–æ–π')
                ChemicPrice += ChemicSmallSofaPrice*SmallSofaAmount + ChemicMiddleSofaPrice*MiddleSofaAmount + ChemicBigSofaPrice*BigSofaAmount
                         
    col1, col2, col3 = st.beta_columns(3)
    with col1:
        Chair = st.checkbox('–ö—Ä–µ—Å–ª–æ')
        if Chair:
            with col2:
                ChairAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ—Å–µ–ª', min_value=1, max_value=10, value=1, step=1)
                if ChairAmount:
                    for i in range(ChairAmount):
                        ChairFunc(i,col3)
                if ChairAmount > 0:
                    SmallChairAmount = ChairSizeAmountList.count('–ú–∞–ª–µ–Ω—å–∫–∏–π')
                    MiddleChairAmount = ChairSizeAmountList.count('–°—Ä–µ–¥–Ω–∏–π')
                    BigChairAmount = ChairSizeAmountList.count('–ë–æ–ª—å—à–æ–π')
                    ChemicPrice += ChemicChairPrice *(0.85*SmallChairAmount + 1*MiddleChairAmount + 1.25*BigChairAmount)

                    

    col1, col2, col3 = st.beta_columns(3)
    with col1:
        Matras = st.checkbox('–ú–∞—Ç—Ä–∞—Å')
        if Matras:
            with col2:
                MatrasAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—Ä–∞—Å–æ–≤', min_value=1, max_value=10, value=1, step=1)
                if MatrasAmount:
                    for i in range(MatrasAmount):
                        MatrasFunc(i,col3)
                if MatrasAmount > 0:
                    SmallMatrasAmount = MatrasSizeAmountList.count('–û–¥–Ω–æ—Å–ø–∞–ª—å–Ω—ã–π')
                    MiddleMatrasAmount = MatrasSizeAmountList.count('–ü–æ–ª—É—Ç–æ—Ä–æ—Å–ø–∞–ª—å–Ω—ã–π')
                    BigMatrasAmount = MatrasSizeAmountList.count('–î–≤—É—Ö—Å–ø–∞–ª—å–Ω—ã–π')
                    ChemicPrice += ChemicMatrasPrice*(0.85*SmallMatrasAmount + 1*MiddleMatrasAmount + 1.25*BigMatrasAmount)

    
    col1, col2, col3 = st.beta_columns(3)
    with col1:
        Kover = st.checkbox('–ö–æ–≤–µ—Ä')
        if Kover:
            with col2:
                KoverAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å–≤–æ –∫–æ–≤—Ä–æ–≤', min_value=1, max_value=10, value=1, step=1)
                if KoverAmount:
                    for i in range(KoverAmount):
                        KoverFunc(i,col3)
                if KoverAmount > 0:
                    SmallKoverAmount = KoverSizeAmountList.count('–ú–∞–ª–µ–Ω—å–∫–∏–π')
                    MiddleKoverAmount = KoverSizeAmountList.count('–°—Ä–µ–¥–Ω–∏–π')
                    BigKoverAmount = KoverSizeAmountList.count('–ë–æ–ª—å—à–æ–π')
                    ChemicPrice += ChemicKoverPrice*(0.85*SmallKoverAmount + 1*MiddleKoverAmount + 1.25*BigKoverAmount)
                    
                    
    col1, col2, col3 = st.beta_columns(3)
    with col1:
        Curtains = st.checkbox('–®—Ç–æ—Ä—ã')
        if Curtains:
            with col2:
                CurtainsAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å–≤–æ —à—Ç–æ—Ä (–ø–∞—Ä)', min_value=1, max_value=10, value=1, step=1)
                if CurtainsAmount > 0:
                    ChemicPrice += ChemicCurtainPrice*CurtainsAmount

    col1, col2, col3 = st.beta_columns(3)
    with col1:
        Stuls = st.checkbox('–°—Ç—É–ª—å—è')
        if Stuls:
            with col2:
                StulsAmount = st.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å–≤–æ —Å—Ç—É–ª—å–µ–≤', min_value=1, max_value=10, value=1, step=1)
                if StulsAmount > 0:
                    ChemicPrice += ChemicStulPrice*StulsAmount
                    
    SpoilsList = st.multiselect('–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–∏–¥—ã –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ö–∏–º–∏—é', ['–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏','–ö—Ä–∞—Å–∫–∞','–ì—Ä—è–∑—å', '–ñ–∏–≤–æ—Ç–Ω—ã–µ','–ú–æ—á–∞'])
    
    if SpoilsList:
        Spoils = ', '.join(SpoilsList)
        st.write(Spoils)
        
    
    if st.checkbox('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üìù', key='Chemic comment'):
        UserInput3 = st.text_area("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ö–∏–º—á–∏—Å—Ç–∫–∏ –º–µ–±–µ–ª–∏")
    else:
        UserInput3 = '–ù–µ—Ç'
         

# st.write('–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö–∏–º—á–∏—Å—Ç–∫–∏ –º–µ–±–µ–ª–∏:', int(ChemicPrice), '—Ä—É–±.')

# if st.checkbox('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ üì∑', key='Chemic photo'):
#     st.file_uploader('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',accept_multiple_files=True)

col1, col2 = st.beta_columns(2)
with col2:
    TotalPrice = round(MainPrice + ExtraPrice + ChemicPrice)
    FinalPrice = TotalPrice
#     st.subheader(f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {FinalPrice}' + ' —Ä—É–±')
    
if st.checkbox('–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'):
    col1, col2 = st.beta_columns(2)
    with col1:
        PromoCode = st.text_input('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥')
        PromoCode = RemoveSpace(PromoCode).upper()
    if (PromoCode == 'SKYLINE') or (PromoCode == 'NEWCLEAN'):
        col1, col2 = st.beta_columns(2)
        with col1:
            st.success('–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!')
        with col2:
            FinalPrice = TotalPrice*0.9
            Discount = TotalPrice*0.1
#             st.subheader(f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å c —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: {round(FinalPrice)}' + ' —Ä—É–±.')
#             st.write('–í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: ', int(Discount),' —Ä—É–±.')
    elif PromoCode == '':
        pass
    else:
        st.error('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!')


st.write('–ï—Å–ª–∏ –í–∞—Å –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, —Ç–æ –º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å üëâ ')
if not st.checkbox('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'):
    st.stop()

st.header('–®–∞–≥ 4. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É')
    
Date = st.date_input("–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–µ–Ω—å", datetime.datetime.now(tz))
    
st.header('–®–∞–≥ 5. –í–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')


Name = st.text_input(label='–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è üòä', help='–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è :smile:')  
PhoneNumber = st.text_input('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è', help='–ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –í–∞–º –ø–æ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É :smile:') 
Email = st.text_input('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –í–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üìß', help='–ù–∞ –í–∞—à—É –ø–æ—á—Ç—É –º—ã –ø—Ä–∏—à–ª–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ —Å–∞–º —Ä–∞—Å—á—ë—Ç :smile:')
Adress = st.text_input('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ üè†', help='–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –∞–¥—Ä–µ—Å, –∞ —Ç–æ –º—ã –í–∞—Å –Ω–µ –Ω–∞–π–¥–µ–º üò¢')

Name = Name.capitalize()
Email = RemoveSpace(Email).lower()

if (Name == '') or (PhoneNumber == '') or (Email == '') or (Adress == ''):
       st.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
else:
    st.success('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é :smile:')


st.header('–®–∞–≥ 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')

st.write('–í—Å–µ –≥–æ—Ç–æ–≤–æ! –ú—ã –∂–¥–µ–º –í–∞—à—É –∑–∞—è–≤–∫—É ü•≥')

form = st.form(key='Submission')
submit = form.form_submit_button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', )
st.text('* –û—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞—è–≤–∫—É, –í—ã –¥–∞—ë—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö')

if submit:
     # Add a placeholder
    latest_iteration = st.empty()
    bar = st.progress(0)
        
    for i in range(100):
        latest_iteration.text(f'–ó–∞–≤–µ—Ä—à–µ–Ω–æ {i+1} %')
        bar.progress(i + 1)
        time.sleep(0.05)
    

    
    SCOPES = ["https://spreadsheets.google.com/feeds",'https://www.googleapis.com/auth/spreadsheets',"https://www.googleapis.com/auth/drive.file","https://www.googleapis.com/auth/drive"]
    SERVICE_ACCOUNT_FILE = 'keys.json'
    creds = None
    creds = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    SPREADSHEET_ID = '1d7I7bBJCRPuUNWbaB5QTXU_ooB0tqXXjtlEkniAUJvk'
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='Requests!A1:A1000',majorDimension='COLUMNS').execute()
    rows = result.get('values',[])
    NumberID = len(rows[0])
    # st.write('{0} rows retrieved.'.format(len(rows[0])))


    df = pd.DataFrame({'ID –∑–∞—è–≤–∫–∏': [str(NumberID)],
                   '–°—Ç–∞—Ç—É—Å': ['–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞'],
                   '–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è': [datetime.datetime.now(tz).strftime("%d-%b-%Y")],
                   '–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è': [datetime.datetime.now(tz).strftime("%H:%M:%S")],
                   '–î–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è': [Date.strftime("%d-%b-%Y")],
                   '–ò–º—è': [str(Name)],
                   '–¢–µ–ª–µ—Ñ–æ–Ω': [str(PhoneNumber)],
                   '–ï–º–∞–π–ª': [str(Email)],
                   '–ê–¥—Ä–µ—Å': [str(Adress)],
                   '–ü—Ä–æ–º–æ–∫–æ–¥': [str(PromoCode)],
                   '–§–æ—Ç–æ': [str(Photos)],
                   '–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å': [str(int(TotalPrice))],
                   '–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å': [str(int(FinalPrice))],
                   '–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É': [str(int(Discount))],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —É–±–æ—Ä–∫–∏': [str(int(MainPrice))],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø.—É–±–æ—Ä–∫–∏': [str(int(ExtraPrice))],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö–∏–º—á–∏—Å—Ç–∫–∏': [str(int(ChemicPrice))],
                   '–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è': [ObjectType], 
                   '–ü–ª–æ—â–∞–¥—å': [str(Area)],
                   '–¢–∏–ø —É–±–æ—Ä–∫–∏': [CleanType], 
                   '–û–±—ä–µ–º —É–±–æ—Ä–∫–∏': [CleanVolumn], 
                   '–°–ø–∞–ª—å–Ω—è 1': [str(BedRoomSizeList[0])], 
                   '–°–ø–∞–ª—å–Ω—è 2': [str(BedRoomSizeList[1])], 
                   '–°–ø–∞–ª—å–Ω—è 3': [str(BedRoomSizeList[2])], 
                   '–°–ø–∞–ª—å–Ω—è 4': [str(BedRoomSizeList[3])], 
                   '–°–ø–∞–ª—å–Ω—è 5': [str(BedRoomSizeList[4])],
                   '–í—Å–µ–≥–æ –ø–æ —Å–ø–∞–ª—å–Ω—è–º': [str(BedRoomArea)],
                   '–ì–æ—Å—Ç–∏–Ω–∞—è 1': [str(DiningRoomSizeList[0])], 
                   '–ì–æ—Å—Ç–∏–Ω–∞—è 2': [str(DiningRoomSizeList[1])], 
                   '–ì–æ—Å—Ç–∏–Ω–∞—è 3': [str(DiningRoomSizeList[2])], 
                   '–ì–æ—Å—Ç–∏–Ω–∞—è 4': [str(DiningRoomSizeList[3])], 
                   '–ì–æ—Å—Ç–∏–Ω–∞—è 5': [str(DiningRoomSizeList[4])],
                   '–í—Å–µ–≥–æ –ø–æ –≥–æ—Å—Ç–∏–Ω—ã–º': [str(DiningRoomArea)],
                   '–°–∞–Ω—É–∑–µ–ª 1': [str(ToiletSizeList[0])], 
                   '–°–∞–Ω—É–∑–µ–ª 2': [str(ToiletSizeList[1])], 
                   '–°–∞–Ω—É–∑–µ–ª 3': [str(ToiletSizeList[2])], 
                   '–°–∞–Ω—É–∑–µ–ª 4': [str(ToiletSizeList[3])], 
                   '–°–∞–Ω—É–∑–µ–ª 5': [str(ToiletSizeList[4])],
                   '–í—Å–µ–≥–æ –ø–æ —Å–∞–Ω—É–∑–ª–∞–º': [str(ToiletArea)],
                   '–ö—É—Ö–Ω—è 1': [str(KitchenSizeList[0])], 
                   '–ö—É—Ö–Ω—è 2': [str(KitchenSizeList[1])], 
                   '–í—Å–µ–≥–æ –ø–æ –∫—É—Ö–Ω—è–º': [str(KitchenArea)],
                   '–ö–æ—Ä–∏–¥–æ—Ä 1': [str(CaridorSizeList[0])], 
                   '–ö–æ—Ä–∏–¥–æ—Ä 2': [str(CaridorSizeList[1])], 
                   '–ö–æ—Ä–∏–¥–æ—Ä 3': [str(CaridorSizeList[2])], 
                   '–ö–æ—Ä–∏–¥–æ—Ä 4': [str(CaridorSizeList[3])], 
                   '–ö–æ—Ä–∏–¥–æ—Ä 5': [str(CaridorSizeList[4])],
                   '–í—Å–µ–≥–æ –ø–æ –∫–æ—Ä–∏–¥–æ—Ä–∞–º': [str(CaridorArea)],
                   '–°–∞—É–Ω–∞ 1': [str(SaunaSizeList[0])], 
                   '–í—Å–µ–≥–æ –ø–æ —Å–∞—É–Ω–µ': [str(SaunaArea)],
                   '–ë–µ—Å–µ–¥–∫–∞ 1': [str(BesedkaSizeList[0])], 
                   '–ë–µ—Å–µ–¥–∫–∞ 2': [str(BesedkaSizeList[1])], 
                   '–ë–µ—Å–µ–¥–∫–∞ 3': [str(BesedkaSizeList[2])], 
                   '–ë–µ—Å–µ–¥–∫–∞ 4': [str(BesedkaSizeList[3])], 
                   '–ë–µ—Å–µ–¥–∫–∞ 5': [str(BesedkaSizeList[4])],
                   '–í—Å–µ–≥–æ –ø–æ –±–µ—Å–µ–¥–∫–∞–º': [str(BesedkaArea)],
                   '–í—Å–µ–≥–æ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º': [str(TotalRoomsArea)],
                   '–ö–æ–º–µ–Ω—Ç. –ø–æ –æ—Å–Ω.—É–±–æ—Ä–∫–µ': [UserInput1],
                   '–ü–∞—Ä': [str(SteamType)],
                   '–û–∫–Ω–∞': [str(Windows)],
                   '–¢–∏–ø –æ–∫–æ–Ω': [str(WindowsType)],
                   '–ö–æ–ª-–≤–æ –æ–∫–æ–Ω': [str(WindowsAmount)],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–æ–Ω': [str(WindowsCost)],
                   '–ë–∞–ª–∫–æ–Ω': [str(Balkon)],
                   '–¢–∏–ø –æ–∫–Ω–∞ –±–∞–ª–∫–æ–Ω–∞': [str(WindowsTypeBalkon)],
                   '–ö–æ–ª-–≤–æ –æ–∫–Ω –±–∞–ª–∫–æ–Ω–∞': [str(WindowsAmountBalkon)],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–Ω –±–∞–ª–∫–æ–Ω–∞': [str(WindowsBalkonCost)],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ': [str(OvenCost)],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ç—è–∂–∫–∞': [str(VytigkaCost)],
                   '–ö–æ–ª-–≤–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤': [str(FridgeAmount)],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤': [str(FridgeCost)],
                   '–ö–æ–ª-–≤–æ –°–í-–ø–µ—á–µ–π': [str(SVOvenAmount)],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å –°–í-–ø–µ—á—å': [str(SVOvenCost)],
                   '–ö–æ–ª-–≤–æ –ª—é—Å—Ç—Ä': [str(LustraAmount)],
                   '–°—Ç–æ–∏–º–æ—Å—Ç—å –ª—é—Å—Ç—Ä':[str(LustraCost)],
                   '–ö–æ–º–µ–Ω—Ç. –ø–æ –¥–æ–ø.—É–±–æ—Ä–∫–µ': [UserInput2],
                   '–•–∏–º—á–∏—Å—Ç–∫–∞': [str(ChemicType)],
                   '–î–∏–≤–∞–Ω':[str(Sofa)],
                   '–ö–æ–ª-–≤–æ –¥–∏–≤–∞–Ω–æ–≤': [str(SofaAmount)],
                   '–†–∞–∑–º–µ—Ä 1-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[0])],
                   '–†–∞–∑–º–µ—Ä 2-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[1])],
                   '–†–∞–∑–º–µ—Ä 3-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[2])],
                   '–†–∞–∑–º–µ—Ä 4-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[3])],
                   '–†–∞–∑–º–µ—Ä 5-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[4])],
                   '–†–∞–∑–º–µ—Ä 6-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[5])],
                   '–†–∞–∑–º–µ—Ä 7-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[6])],
                   '–†–∞–∑–º–µ—Ä 8-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[7])],
                   '–†–∞–∑–º–µ—Ä 9-–≥–æ –¥–∏–≤–∞–Ω–∞': [str(SofaSizeAmountList[8])],
                   '–†–∞–∑–º–µ—Ä 10-–≥–æ –¥–∏–≤–∞–Ω–∞':[str(SofaSizeAmountList[9])],
                   '–ö—Ä–µ—Å–ª–æ': [str(Chair)],
                   '–ö–æ–ª-–≤–æ –∫—Ä–µ—Å–µ–ª': [str(ChairAmount)],
                   '–†–∞–∑–º–µ—Ä 1-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[0])],
                   '–†–∞–∑–º–µ—Ä 2-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[1])],
                   '–†–∞–∑–º–µ—Ä 3-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[2])],
                   '–†–∞–∑–º–µ—Ä 4-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[3])],
                   '–†–∞–∑–º–µ—Ä 5-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[4])],
                   '–†–∞–∑–º–µ—Ä 6-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[5])],
                   '–†–∞–∑–º–µ—Ä 7-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[6])],
                   '–†–∞–∑–º–µ—Ä 8-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[7])],
                   '–†–∞–∑–º–µ—Ä 9-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[8])],
                   '–†–∞–∑–º–µ—Ä 10-–≥–æ –∫—Ä–µ—Å–ª–∞': [str(ChairSizeAmountList[9])],
                   '–ú–∞—Ç—Ä–∞—Å': [str(Matras)],
                   '–ö–æ–ª-–≤–æ –º–∞—Ç—Ä–∞—Å–æ–≤': [str(MatrasAmount)],
                   '–†–∞–∑–º–µ—Ä 1-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[0])],
                   '–†–∞–∑–º–µ—Ä 2-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[1])],
                   '–†–∞–∑–º–µ—Ä 3-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[2])],
                   '–†–∞–∑–º–µ—Ä 4-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[3])],
                   '–†–∞–∑–º–µ—Ä 5-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[4])],
                   '–†–∞–∑–º–µ—Ä 6-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[5])],
                   '–†–∞–∑–º–µ—Ä 7-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[6])],
                   '–†–∞–∑–º–µ—Ä 8-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[7])],
                   '–†–∞–∑–º–µ—Ä 9-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[8])],
                   '–†–∞–∑–º–µ—Ä 10-–≥–æ –º–∞—Ç—Ä–∞—Å–∞': [str(MatrasSizeAmountList[9])],
                   '–ö–æ–≤–µ—Ä': [str(Kover)],
                   '–ö–æ–ª-–≤–æ –∫–æ–≤—Ä–æ–≤': [str(KoverAmount)],
                   '–†–∞–∑–º–µ—Ä 1-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[0])],
                   '–†–∞–∑–º–µ—Ä 2-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[1])],
                   '–†–∞–∑–º–µ—Ä 3-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[2])],
                   '–†–∞–∑–º–µ—Ä 4-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[3])],
                   '–†–∞–∑–º–µ—Ä 5-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[4])],
                   '–†–∞–∑–º–µ—Ä 6-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[5])],
                   '–†–∞–∑–º–µ—Ä 7-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[6])],
                   '–†–∞–∑–º–µ—Ä 8-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[7])],
                   '–†–∞–∑–º–µ—Ä 9-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[8])],
                   '–†–∞–∑–º–µ—Ä 10-–≥–æ –∫–æ–≤—Ä–∞': [str(KoverSizeAmountList[9])],
                   '–®—Ç–æ—Ä—ã': [str(Curtains)],
                   '–ö–æ–ª-–≤–æ —à—Ç–æ—Ä': [str(CurtainsAmount)],
                   '–°—Ç—É–ª—å—è': [str(Stuls)],
                   '–ö–æ–ª-–≤–æ —Å—Ç—É–ª—å–µ–≤': [str(StulsAmount)],
                   '–í–∏–¥—ã –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π': [Spoils],
                   '–ö–æ–º–µ–Ω—Ç. –ø–æ —Ö–∏–º.—á–∏—Å—Ç–∫–µ': [UserInput3]
                   })
    
    data = [df.iloc[0].to_list()]
    request = sheet.values().append(spreadsheetId=SPREADSHEET_ID, range='Requests!A1:DZ', valueInputOption='USER_ENTERED', insertDataOption='INSERT_ROWS', body={'values':data})
    response = request.execute()
    st.write(df.loc[0,['ID –∑–∞—è–≤–∫–∏','–°—Ç–∞—Ç—É—Å','–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è']])
    
    time.sleep(1.5)
    st.success('–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à—É –∑–∞—è–≤–∫—É!:smile:')
    time.sleep(1.5)
    st.balloons()
    time.sleep(2)
    
    if Email == '':
        st.error('–ö–æ–ø–∏—è –∑–∞—è–≤–∫–∏ –¥–æ –í–∞—Å –Ω–µ –¥–æ—à–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–æ–º! ')  
    else:
        SendEmail(Name,NumberID,Email)
        st.success('–ö–æ–ø–∏—è –∑–∞—è–≤–∫–∏ —Ç–∞–∫–∂–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–∞–º –Ω–∞ –ø–æ—á—Ç—É :smile:')
        
    st.write('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä üë©‚Äçüíº –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ñ–µ–ª–∞–µ–º –≤–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!')
    
    col1, col2, col3 = st.beta_columns(3)
    with col2:
        st.image(image, width=250)
    
else:
    pass
